mutation addExpenseGroup(
  $startDate: String!
  $endDate: String!
  $totalBudget: Float!
  $expenses: [ExpenseInput!]!
) {
  expenseGroup: addExpenseGroup(
    startDate: $startDate
    endDate: $endDate
    totalBudget: $totalBudget
    expenses: $expenses
  )
}

mutation deleteExpenseGroup($expenseGroupId: String!) {
  deleteExpenseGroup(expenseGroupId: $expenseGroupId)
}

mutation deleteExpense($expenseGroupId: String!, $expenseId: String!) {
  deleteExpense(expenseGroupId: $expenseGroupId, expenseId: $expenseId)
}

mutation updateExpense(
  $_id: ID
  $expenseGroupId: ID!
  $name: String!
  $balance: Float!
  $dueDate: String
  $isPaid: Boolean!
  $note: String
) {
  updateExpense(
    _id: $_id
    expenseGroupId: $expenseGroupId
    name: $name
    balance: $balance
    dueDate: $dueDate
    isPaid: $isPaid
    note: $note
  )
}

mutation updateExpensePaidStatus(
  $isPaid: Boolean!
  $expenseGroupId: String!
  $expenseId: String!
) {
  updateExpensePaidStatus(
    isPaid: $isPaid
    expenseGroupId: $expenseGroupId
    expenseId: $expenseId
  )
}

mutation addExpense(
  $expenseGroupId: ID!
  $name: String!
  $balance: Float!
  $dueDate: String
  $isPaid: Boolean!
  $note: String
) {
  expense: addExpense(
    expenseGroupId: $expenseGroupId
    name: $name
    balance: $balance
    dueDate: $dueDate
    isPaid: $isPaid
    note: $note
  )
}

mutation updateExpenseGroup(
  $expenseGroupId: ID!
  $startDate: String!
  $endDate: String!
  $totalBudget: Float!
) {
  updateExpenseGroup(
    expenseGroupId: $expenseGroupId
    startDate: $startDate
    endDate: $endDate
    totalBudget: $totalBudget
  )
}
