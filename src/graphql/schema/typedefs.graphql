type Query {
  getAllExpenseGroups: [ExpenseGroup]!
  getExpenseGroupById(_id: String!): ExpenseGroup!
  getExpense(_id: String!): Expense!
  authenticateUser(username: String!, password: String!): StatusResponse!
  logoutUser: Boolean!
}

type Mutation {
  addExpenseGroup(input: NewExpenseGroupInput!): ExpenseGroup!
  updateExpense(input: UpdateExpenseInput!): Expense!
  updateExpensePaidStatus(
    isPaid: Boolean!
    expenseGroupId: String!
    expenseId: String!
  ): PaidStatus!
  addExpense(input: NewExpenseInput): Expense!
  deleteExpenseGroup(_id: String!): StatusResponse!
  updateExpenseGroup(
    expenseGroupId: ID!
    startDate: String!
    endDate: String!
    totalBudget: Float!
  ): ExpenseGroupInfo
}

type PaidStatus {
  isPaid: Boolean!
}

type StatusResponse {
  code: Int!
  message: String
}

type ExpenseGroup {
  _id: ID
  startDate: String!
  endDate: String!
  totalBudget: Float!
  expenses: [Expense!]!
}

type ExpenseGroupInfo {
  expenseGroupId: ID!
  startDate: String!
  endDate: String!
  totalBudget: Float!
}

type Expense {
  _id: ID
  name: String!
  balance: Float!
  dueDate: String
  isPaid: Boolean!
  note: String
}

input UpdateExpenseInput {
  _id: ID
  expenseGroupId: ID!
  name: String!
  balance: Float!
  dueDate: String
  isPaid: Boolean!
  isOverdue: Boolean
  note: String
}

input NewExpenseGroupInput {
  startDate: String
  endDate: String
  totalBudget: Float
  expenses: [NewExpenseInput]
}

input NewExpenseInput {
  expenseGroupId: ID
  name: String
  balance: Float
  dueDate: String
  isPaid: Boolean
  note: String
}
