type Query {
  getAllExpenseGroups: [ExpenseGroup]!
  getExpenseGroupById(_id: String!): ExpenseGroup!
  getExpense(_id: String!): Expense!
  authenticateUser(username: String!, password: String!): StatusResponse!
  deleteExpenseGroup(_id: String!): StatusResponse!
  logoutUser: Boolean!
}

type Mutation {
  addExpenseGroup(input: NewExpenseGroupInput!): ExpenseGroup!
  updateExpense(input: UpdateExpenseInput!): Expense!
}

type StatusResponse {
  code: Int!
  message: String
}

type ExpenseGroup {
  _id: ID
  startDate: String!
  endDate: String!
  totalBudget: Float!
  expenses: [Expense!]!
}

type Expense {
  _id: ID
  name: String!
  balance: Float!
  dueDate: String!
  isPaid: Boolean!
  note: String
}

input UpdateExpenseInput {
  expenseId: ID!
  expenseGroupId: ID!
  name: String!
  balance: Float!
  dueDate: String!
  isPaid: Boolean!
  isOverdue: Boolean
  note: String
}

input NewExpenseGroupInput {
  startDate: String
  endDate: String
  totalBudget: Float
  expenses: [NewExpenseInput]
}

input NewExpenseInput {
  name: String
  balance: Float
  dueDate: String
  isPaid: Boolean
  note: String
}
