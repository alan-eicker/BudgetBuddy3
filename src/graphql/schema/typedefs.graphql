scalar Void

type Query {
  getAllExpenseGroups: [ExpenseGroup]!
  getExpenseGroupById(_id: String!): ExpenseGroup!
  getExpense(_id: String!): Expense!
  authenticateUser(username: String!, password: String!): StatusResponse!
  logoutUser: Boolean!
}

type Mutation {
  deleteExpenseGroup(expenseGroupId: String!): Void
  addExpenseGroup(
    startDate: String!
    endDate: String!
    totalBudget: Float!
    expenses: [NewExpenseInput!]!
  ): Void
  updateExpense(
    _id: ID
    expenseGroupId: ID!
    name: String!
    balance: Float!
    dueDate: String
    isPaid: Boolean!
    isOverdue: Boolean
    note: String
  ): Void
  updateExpensePaidStatus(
    isPaid: Boolean!
    expenseGroupId: String!
    expenseId: String!
  ): Void
  addExpense(
    expenseGroupId: ID!
    name: String!
    balance: Float!
    dueDate: String
    isPaid: Boolean!
    note: String
  ): Void
  updateExpenseGroup(
    expenseGroupId: ID
    startDate: String!
    endDate: String!
    totalBudget: Float!
  ): Void
}

type Status {
  status: Int!
  message: String
}

type ExpenseGroup {
  _id: ID
  startDate: String!
  endDate: String!
  totalBudget: Float!
  expenses: [Expense!]!
}

type Expense {
  _id: ID
  name: String!
  balance: Float!
  dueDate: String
  isPaid: Boolean!
  note: String
}

input NewExpenseInput {
  expenseGroupId: ID
  name: String
  balance: Float
  dueDate: String
  isPaid: Boolean
  note: String
}
